continue
decoded_token
continue
decoded_token[0]["user_id"]
decoded_token[0][:user_id]
decoded_token[0]
decoded_token
user_id
continue
decoded_token["user_id"]
decoded_token[:user_id]
user_id
decoded_token
continue
res
token
continue
session[:token_id]
current_user
currrent_user
continue
request.headers['Authorization']
request.headers
current_user
continue
request.headers
request.headers['Authorization']
request.headers
continue
request.headers['Authorization']
request.headers
request
log_in @user
token
@user.token
continue
@user
token
current_user
continue
@user
continue
@user.authenticate(params[:session][:password])
@user.authenticate
@user.password
@user.username
@user
continue
params
@user
continue
params
continue
params
@user
continue
@user
continue
@user
params
@user
continue
@user.save
continue
@user.errors
@user.error
@user.username.errors
@user.password
@user.username
parameters
current_user
current_use
params
@user.save
User.errors
user.errors
@user.errors
@user
continue
@user
continue
decoded_token[0]
decoded_token
user_id
@user
decoded_token
user_id
@user
continue
user_id
continue
user_id
decoded_token[0]["user_id"]
 decoded_token[0][:user_id]  
decoded_token[0]
decoded_token
@user
exit
decoded_token
user_id
@user
continue
user_id
decoded_token
continue
auth_header
@user.errors
token.errors
continue
auth_header
continue
auth_header
continue
apikey--
api key--
JWT.decode(token,'secret')
token
continue
auth_header
JWT.decode(token,"secret")
JWT.decode(token)
token
continue
auth_header.split(' ').last
auth_split(' ').last
auth_header.split(' ')
auth_header.split(' '
token
auth_header
exit 
request.headers
request
auth_header
continue
request.headers['authorization']
request.headers['Authorization']
request.headers
request.header
request
auth_header 
continue
decoded_token
@user
exit
decoded_token
decode_token
@user
decode_token
decode_toke 
decoded_token
@user
exit 
break
secret
auth_header
token
continue
@comment
@comment.save
current_user.username
current_username.username
current_user
continue
errors
errors.add.info?
@user.errors
@user.save
continue
@post.count
@post
continue
@post
params[:id]
continue
params[:id]
continue
@comment
current_user.username 
current_username
current_user
@comment.foreign_key?
@comment.save
@post.errors
@comment.errors
@comment.errors?
@comment.errors
continue
@post.errors
@post.save
@post.errors
continue
@post.save
continue
@post.errors
@post.save
@post.userid = current_user.id
current_user.id
@current_user.id
@post.errors
@post.save
@post.errors
Post.count
Post.first
@post.first
parameter
paramete
continue
<% @post.errors.each do %
<% end %>
<%= "#{attr} #{msg}" if @user.errors[attr].first == msg %> 
<% @user.errors.each do |attr, msg| %>
@post.errors
@post.save
continue
@post.errors.of_kind?(:user)
@post.errors.of_kind(:user)
@post.errors.of_kind?(:post_name,:taken)
@post.errors.of_kind?(:post_description,:blank)
@post.errors.of_kind?(:post_name,:blank)
@post.errors.of(:post_name,:blank)
@post.errors.of_kind?(:user)
@post.errors.of_kind?(:user,:id)
@post.errors.of_kind?
@post.valid?
@post.errors.where(:user)
@post.errrors.where(:user)
@post.errors.where(:comments)
error[:username]
errors[:username]
@post.errors.where(:user[:username])
@post.errors.where(:post)
@post.save
@post.sav
continue
@post.save
@post.errors.where(:user)
current_user.valid?
@post.valid?
@post.errors
@post.save
continue
@post.errors
@post.save
@post.userid
@post.post_description
@post.post_name 
continue
params
@post.post_description
@post.userid
@post.post_name 
continue
@post.post_name
continue
@post.errors
@post.save
